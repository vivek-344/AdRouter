// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: campaign.sql

package db

import (
	"context"
)

const createCampaign = `-- name: CreateCampaign :one
INSERT INTO campaign (
  cid,
  img,
  cta
) VALUES (
    $1, $2, $3
)
RETURNING cid, img, cta, status, created_at
`

type CreateCampaignParams struct {
	Cid string `json:"cid"`
	Img string `json:"img"`
	Cta string `json:"cta"`
}

func (q *Queries) CreateCampaign(ctx context.Context, arg CreateCampaignParams) (Campaign, error) {
	row := q.db.QueryRow(ctx, createCampaign, arg.Cid, arg.Img, arg.Cta)
	var i Campaign
	err := row.Scan(
		&i.Cid,
		&i.Img,
		&i.Cta,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCampaign = `-- name: DeleteCampaign :exec
DELETE FROM campaign
WHERE cid = $1
`

func (q *Queries) DeleteCampaign(ctx context.Context, cid string) error {
	_, err := q.db.Exec(ctx, deleteCampaign, cid)
	return err
}

const getCampaign = `-- name: GetCampaign :one
SELECT cid, img, cta, status, created_at
FROM campaign
WHERE cid = $1
`

func (q *Queries) GetCampaign(ctx context.Context, cid string) (Campaign, error) {
	row := q.db.QueryRow(ctx, getCampaign, cid)
	var i Campaign
	err := row.Scan(
		&i.Cid,
		&i.Img,
		&i.Cta,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listAllActiveCampaign = `-- name: ListAllActiveCampaign :many
SELECT cid, img, cta, status, created_at
FROM campaign
WHERE status = 'active'
`

func (q *Queries) ListAllActiveCampaign(ctx context.Context) ([]Campaign, error) {
	rows, err := q.db.Query(ctx, listAllActiveCampaign)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Campaign{}
	for rows.Next() {
		var i Campaign
		if err := rows.Scan(
			&i.Cid,
			&i.Img,
			&i.Cta,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllCampaign = `-- name: ListAllCampaign :many
SELECT cid, img, cta, status, created_at
FROM campaign
`

func (q *Queries) ListAllCampaign(ctx context.Context) ([]Campaign, error) {
	rows, err := q.db.Query(ctx, listAllCampaign)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Campaign{}
	for rows.Next() {
		var i Campaign
		if err := rows.Scan(
			&i.Cid,
			&i.Img,
			&i.Cta,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const toggleStatus = `-- name: ToggleStatus :exec
UPDATE campaign
SET status = CASE 
    WHEN status = 'active' THEN 'inactive'
    ELSE 'inactive'
END
WHERE cid = $1
`

func (q *Queries) ToggleStatus(ctx context.Context, cid string) error {
	_, err := q.db.Exec(ctx, toggleStatus, cid)
	return err
}

const updateCampaignCta = `-- name: UpdateCampaignCta :one
UPDATE campaign
SET cta = $2
WHERE cid = $1
RETURNING cid, img, cta, status, created_at
`

type UpdateCampaignCtaParams struct {
	Cid string `json:"cid"`
	Cta string `json:"cta"`
}

func (q *Queries) UpdateCampaignCta(ctx context.Context, arg UpdateCampaignCtaParams) (Campaign, error) {
	row := q.db.QueryRow(ctx, updateCampaignCta, arg.Cid, arg.Cta)
	var i Campaign
	err := row.Scan(
		&i.Cid,
		&i.Img,
		&i.Cta,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updateCampaignImage = `-- name: UpdateCampaignImage :one
UPDATE campaign
SET img = $2
WHERE cid = $1
RETURNING cid, img, cta, status, created_at
`

type UpdateCampaignImageParams struct {
	Cid string `json:"cid"`
	Img string `json:"img"`
}

func (q *Queries) UpdateCampaignImage(ctx context.Context, arg UpdateCampaignImageParams) (Campaign, error) {
	row := q.db.QueryRow(ctx, updateCampaignImage, arg.Cid, arg.Img)
	var i Campaign
	err := row.Scan(
		&i.Cid,
		&i.Img,
		&i.Cta,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
